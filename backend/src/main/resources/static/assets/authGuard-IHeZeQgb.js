var c=(s,e)=>()=>(e||s((e={exports:{}}).exports,e),e.exports);import{a as n}from"./config-CkEC2-gR.js";var l=c((h,a)=>{class o{static async checkAuth(){try{const e=this.getToken();return e?this.isTokenExpired()?(console.log("Token expiré localement"),this.clearAuthData(),this.redirectToLogin(),!1):await this.verifyTokenWithServer(e)?!0:(console.log("Token invalide côté serveur"),this.clearAuthData(),this.redirectToLogin(),!1):(this.redirectToLogin(),!1)}catch(e){return console.error("Erreur lors de la vérification d'authentification:",e),this.clearAuthData(),this.redirectToLogin(),!1}}static async verifyTokenWithServer(e){try{return(await fetch(`${n}/api/auth/verify-token`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({token:e})})).ok}catch(r){return console.error("Erreur lors de la vérification du token:",r),!1}}static getToken(){return localStorage.getItem("authToken")}static getUserData(){const e=localStorage.getItem("userData");return e?JSON.parse(e):null}static isTokenExpired(){const e=localStorage.getItem("tokenExpiration");return e?new Date>new Date(e):!0}static isLoggedIn(){return this.getToken()?this.isTokenExpired()?(this.clearAuthData(),!1):!0:!1}static clearAuthData(){localStorage.removeItem("authToken"),localStorage.removeItem("userData"),localStorage.removeItem("tokenExpiration")}static redirectToLogin(){window.location.replace("/login.html")}static redirectAfterLogin(){const e=localStorage.getItem("redirectAfterLogin");localStorage.removeItem("redirectAfterLogin"),e&&e!=="/login.html"&&!e.includes("login.html")?window.location.href=e:window.location.href="./index.html"}static setupAPIInterceptor(){const e=window.fetch;window.fetch=async function(r,t={}){if(r.includes(n)){const i=o.getToken();i&&(t.headers={...t.headers,Authorization:`Bearer ${i}`})}try{const i=await e(r,t);if(i.status===401&&r.includes(n))throw console.log("Réponse 401 détectée, redirection vers login"),o.handleUnauthorized(),new Error("Session expirée");return i}catch(i){throw i}}}static handleUnauthorized(){this.clearAuthData(),this.showSessionExpiredMessage(),setTimeout(()=>{this.redirectToLogin()},2e3)}static showSessionExpiredMessage(){const e=document.createElement("div");e.className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4",e.innerHTML=`
            <div class="bg-white rounded-lg p-6 max-w-md w-full mx-auto text-center">
                <div class="mb-4">
                    <svg class="mx-auto h-12 w-12 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                              d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.502 0L4.312 15.5c-.77.833.192 2.5 1.732 2.5z"/>
                    </svg>
                </div>
                <h3 class="text-lg font-medium text-gray-900 mb-2">Session expirée</h3>
                <p class="text-sm text-gray-500 mb-4">
                    Votre session a expiré. Vous allez être redirigé vers la page de connexion.
                </p>
                <button onclick="AuthGuard.redirectToLogin();" 
                        class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors">
                    Se reconnecter maintenant
                </button>
            </div>
        `,document.body.appendChild(e)}static async init(){this.setupAPIInterceptor();const e=["index.html"],r=window.location.pathname.split("/").pop()||"index.html";return e.includes(r)||r===""?await this.checkAuth()?(this.displayUserInfo(),!0):!1:!0}static displayUserInfo(){const e=this.getUserData();if(!e)return;document.querySelectorAll("[data-user-display]").forEach(t=>{switch(t.getAttribute("data-user-display")){case"fullname":t.textContent=`${e.firstname} ${e.lastname}`;break;case"firstname":t.textContent=e.firstname;break;case"username":t.textContent=e.username;break;case"email":t.textContent=e.email;break}})}static logout(){this.clearAuthData(),this.notifyServerLogout(),this.redirectToLogin()}static async notifyServerLogout(){try{const e=this.getToken();e&&await fetch(`${n}/api/auth/logout`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${e}`}})}catch(e){console.log("Impossible de notifier le serveur de la déconnexion:",e)}}static getUserDirection(){return this.getUserData()?.direction||null}static isUserFromDirection(e){return this.getUserDirection()?.numero===e}static displayUserInfo(){const e=this.getUserData();if(!e)return;document.querySelectorAll("[data-user-display]").forEach(t=>{switch(t.getAttribute("data-user-display")){case"fullname":t.textContent=`${e.firstname} ${e.lastname}`;break;case"firstname":t.textContent=e.firstname;break;case"username":t.textContent=e.username;break;case"email":t.textContent=e.email;break;case"direction":e.direction&&(t.textContent=e.direction.nom);break;case"direction-numero":e.direction&&(t.textContent=e.direction.numero);break;case"direction-full":e.direction&&(t.textContent=`${e.direction.nom} (#${e.direction.numero})`);break}})}}document.addEventListener("DOMContentLoaded",async function(){await o.init()});typeof a<"u"&&a.exports&&(a.exports=o);window.AuthGuard=o});export default l();
